# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from ahra/SendMotionRequest.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class SendMotionRequest(genpy.Message):
  _md5sum = "4bcb9a6896459a3a3d39e3c375bae71b"
  _type = "ahra/SendMotionRequest"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """bool SM_finish
bool TA_finish
bool UD_finish
bool RL_finish
bool EM_finish
bool ST_finish
int32 walkcount
int32 request_id # Unique request ID
"""
  __slots__ = ['SM_finish','TA_finish','UD_finish','RL_finish','EM_finish','ST_finish','walkcount','request_id']
  _slot_types = ['bool','bool','bool','bool','bool','bool','int32','int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       SM_finish,TA_finish,UD_finish,RL_finish,EM_finish,ST_finish,walkcount,request_id

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(SendMotionRequest, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.SM_finish is None:
        self.SM_finish = False
      if self.TA_finish is None:
        self.TA_finish = False
      if self.UD_finish is None:
        self.UD_finish = False
      if self.RL_finish is None:
        self.RL_finish = False
      if self.EM_finish is None:
        self.EM_finish = False
      if self.ST_finish is None:
        self.ST_finish = False
      if self.walkcount is None:
        self.walkcount = 0
      if self.request_id is None:
        self.request_id = 0
    else:
      self.SM_finish = False
      self.TA_finish = False
      self.UD_finish = False
      self.RL_finish = False
      self.EM_finish = False
      self.ST_finish = False
      self.walkcount = 0
      self.request_id = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_6B2i().pack(_x.SM_finish, _x.TA_finish, _x.UD_finish, _x.RL_finish, _x.EM_finish, _x.ST_finish, _x.walkcount, _x.request_id))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 14
      (_x.SM_finish, _x.TA_finish, _x.UD_finish, _x.RL_finish, _x.EM_finish, _x.ST_finish, _x.walkcount, _x.request_id,) = _get_struct_6B2i().unpack(str[start:end])
      self.SM_finish = bool(self.SM_finish)
      self.TA_finish = bool(self.TA_finish)
      self.UD_finish = bool(self.UD_finish)
      self.RL_finish = bool(self.RL_finish)
      self.EM_finish = bool(self.EM_finish)
      self.ST_finish = bool(self.ST_finish)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_6B2i().pack(_x.SM_finish, _x.TA_finish, _x.UD_finish, _x.RL_finish, _x.EM_finish, _x.ST_finish, _x.walkcount, _x.request_id))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 14
      (_x.SM_finish, _x.TA_finish, _x.UD_finish, _x.RL_finish, _x.EM_finish, _x.ST_finish, _x.walkcount, _x.request_id,) = _get_struct_6B2i().unpack(str[start:end])
      self.SM_finish = bool(self.SM_finish)
      self.TA_finish = bool(self.TA_finish)
      self.UD_finish = bool(self.UD_finish)
      self.RL_finish = bool(self.RL_finish)
      self.EM_finish = bool(self.EM_finish)
      self.ST_finish = bool(self.ST_finish)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_6B2i = None
def _get_struct_6B2i():
    global _struct_6B2i
    if _struct_6B2i is None:
        _struct_6B2i = struct.Struct("<6B2i")
    return _struct_6B2i
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from ahra/SendMotionResponse.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class SendMotionResponse(genpy.Message):
  _md5sum = "7d0fd39542efcd01f963016eab8f1bc4"
  _type = "ahra/SendMotionResponse"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """int8 select_motion
float64 distance
float64 turn_angle
float64 ud_neckangle
float64 rl_neckangle
bool emergency
bool success # Response success status
"""
  __slots__ = ['select_motion','distance','turn_angle','ud_neckangle','rl_neckangle','emergency','success']
  _slot_types = ['int8','float64','float64','float64','float64','bool','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       select_motion,distance,turn_angle,ud_neckangle,rl_neckangle,emergency,success

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(SendMotionResponse, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.select_motion is None:
        self.select_motion = 0
      if self.distance is None:
        self.distance = 0.
      if self.turn_angle is None:
        self.turn_angle = 0.
      if self.ud_neckangle is None:
        self.ud_neckangle = 0.
      if self.rl_neckangle is None:
        self.rl_neckangle = 0.
      if self.emergency is None:
        self.emergency = False
      if self.success is None:
        self.success = False
    else:
      self.select_motion = 0
      self.distance = 0.
      self.turn_angle = 0.
      self.ud_neckangle = 0.
      self.rl_neckangle = 0.
      self.emergency = False
      self.success = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_b4d2B().pack(_x.select_motion, _x.distance, _x.turn_angle, _x.ud_neckangle, _x.rl_neckangle, _x.emergency, _x.success))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 35
      (_x.select_motion, _x.distance, _x.turn_angle, _x.ud_neckangle, _x.rl_neckangle, _x.emergency, _x.success,) = _get_struct_b4d2B().unpack(str[start:end])
      self.emergency = bool(self.emergency)
      self.success = bool(self.success)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_b4d2B().pack(_x.select_motion, _x.distance, _x.turn_angle, _x.ud_neckangle, _x.rl_neckangle, _x.emergency, _x.success))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 35
      (_x.select_motion, _x.distance, _x.turn_angle, _x.ud_neckangle, _x.rl_neckangle, _x.emergency, _x.success,) = _get_struct_b4d2B().unpack(str[start:end])
      self.emergency = bool(self.emergency)
      self.success = bool(self.success)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_b4d2B = None
def _get_struct_b4d2B():
    global _struct_b4d2B
    if _struct_b4d2B is None:
        _struct_b4d2B = struct.Struct("<b4d2B")
    return _struct_b4d2B
class SendMotion(object):
  _type          = 'ahra/SendMotion'
  _md5sum = '195b77fcb35ce347682e382fd8b4d70b'
  _request_class  = SendMotionRequest
  _response_class = SendMotionResponse
