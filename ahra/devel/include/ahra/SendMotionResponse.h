// Generated by gencpp from file ahra/SendMotionResponse.msg
// DO NOT EDIT!


#ifndef AHRA_MESSAGE_SENDMOTIONRESPONSE_H
#define AHRA_MESSAGE_SENDMOTIONRESPONSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace ahra
{
template <class ContainerAllocator>
struct SendMotionResponse_
{
  typedef SendMotionResponse_<ContainerAllocator> Type;

  SendMotionResponse_()
    : select_motion(0)
    , distance(0.0)
    , turn_angle(0.0)
    , ud_neckangle(0.0)
    , rl_neckangle(0.0)
    , emergency(false)
    , success(false)  {
    }
  SendMotionResponse_(const ContainerAllocator& _alloc)
    : select_motion(0)
    , distance(0.0)
    , turn_angle(0.0)
    , ud_neckangle(0.0)
    , rl_neckangle(0.0)
    , emergency(false)
    , success(false)  {
  (void)_alloc;
    }



   typedef int8_t _select_motion_type;
  _select_motion_type select_motion;

   typedef double _distance_type;
  _distance_type distance;

   typedef double _turn_angle_type;
  _turn_angle_type turn_angle;

   typedef double _ud_neckangle_type;
  _ud_neckangle_type ud_neckangle;

   typedef double _rl_neckangle_type;
  _rl_neckangle_type rl_neckangle;

   typedef uint8_t _emergency_type;
  _emergency_type emergency;

   typedef uint8_t _success_type;
  _success_type success;





  typedef boost::shared_ptr< ::ahra::SendMotionResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ahra::SendMotionResponse_<ContainerAllocator> const> ConstPtr;

}; // struct SendMotionResponse_

typedef ::ahra::SendMotionResponse_<std::allocator<void> > SendMotionResponse;

typedef boost::shared_ptr< ::ahra::SendMotionResponse > SendMotionResponsePtr;
typedef boost::shared_ptr< ::ahra::SendMotionResponse const> SendMotionResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ahra::SendMotionResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ahra::SendMotionResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ahra::SendMotionResponse_<ContainerAllocator1> & lhs, const ::ahra::SendMotionResponse_<ContainerAllocator2> & rhs)
{
  return lhs.select_motion == rhs.select_motion &&
    lhs.distance == rhs.distance &&
    lhs.turn_angle == rhs.turn_angle &&
    lhs.ud_neckangle == rhs.ud_neckangle &&
    lhs.rl_neckangle == rhs.rl_neckangle &&
    lhs.emergency == rhs.emergency &&
    lhs.success == rhs.success;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ahra::SendMotionResponse_<ContainerAllocator1> & lhs, const ::ahra::SendMotionResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ahra

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ahra::SendMotionResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ahra::SendMotionResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ahra::SendMotionResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ahra::SendMotionResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ahra::SendMotionResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ahra::SendMotionResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ahra::SendMotionResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "7d0fd39542efcd01f963016eab8f1bc4";
  }

  static const char* value(const ::ahra::SendMotionResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x7d0fd39542efcd01ULL;
  static const uint64_t static_value2 = 0xf963016eab8f1bc4ULL;
};

template<class ContainerAllocator>
struct DataType< ::ahra::SendMotionResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ahra/SendMotionResponse";
  }

  static const char* value(const ::ahra::SendMotionResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ahra::SendMotionResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int8 select_motion\n"
"float64 distance\n"
"float64 turn_angle\n"
"float64 ud_neckangle\n"
"float64 rl_neckangle\n"
"bool emergency\n"
"bool success # Response success status\n"
;
  }

  static const char* value(const ::ahra::SendMotionResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ahra::SendMotionResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.select_motion);
      stream.next(m.distance);
      stream.next(m.turn_angle);
      stream.next(m.ud_neckangle);
      stream.next(m.rl_neckangle);
      stream.next(m.emergency);
      stream.next(m.success);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SendMotionResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ahra::SendMotionResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ahra::SendMotionResponse_<ContainerAllocator>& v)
  {
    s << indent << "select_motion: ";
    Printer<int8_t>::stream(s, indent + "  ", v.select_motion);
    s << indent << "distance: ";
    Printer<double>::stream(s, indent + "  ", v.distance);
    s << indent << "turn_angle: ";
    Printer<double>::stream(s, indent + "  ", v.turn_angle);
    s << indent << "ud_neckangle: ";
    Printer<double>::stream(s, indent + "  ", v.ud_neckangle);
    s << indent << "rl_neckangle: ";
    Printer<double>::stream(s, indent + "  ", v.rl_neckangle);
    s << indent << "emergency: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.emergency);
    s << indent << "success: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.success);
  }
};

} // namespace message_operations
} // namespace ros

#endif // AHRA_MESSAGE_SENDMOTIONRESPONSE_H
