// Generated by gencpp from file ahra/SendMotionRequest.msg
// DO NOT EDIT!


#ifndef AHRA_MESSAGE_SENDMOTIONREQUEST_H
#define AHRA_MESSAGE_SENDMOTIONREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace ahra
{
template <class ContainerAllocator>
struct SendMotionRequest_
{
  typedef SendMotionRequest_<ContainerAllocator> Type;

  SendMotionRequest_()
    : SM_finish(false)
    , TA_finish(false)
    , UD_finish(false)
    , RL_finish(false)
    , EM_finish(false)
    , ST_finish(false)
    , walkcount(0)
    , request_id(0)  {
    }
  SendMotionRequest_(const ContainerAllocator& _alloc)
    : SM_finish(false)
    , TA_finish(false)
    , UD_finish(false)
    , RL_finish(false)
    , EM_finish(false)
    , ST_finish(false)
    , walkcount(0)
    , request_id(0)  {
  (void)_alloc;
    }



   typedef uint8_t _SM_finish_type;
  _SM_finish_type SM_finish;

   typedef uint8_t _TA_finish_type;
  _TA_finish_type TA_finish;

   typedef uint8_t _UD_finish_type;
  _UD_finish_type UD_finish;

   typedef uint8_t _RL_finish_type;
  _RL_finish_type RL_finish;

   typedef uint8_t _EM_finish_type;
  _EM_finish_type EM_finish;

   typedef uint8_t _ST_finish_type;
  _ST_finish_type ST_finish;

   typedef int32_t _walkcount_type;
  _walkcount_type walkcount;

   typedef int32_t _request_id_type;
  _request_id_type request_id;





  typedef boost::shared_ptr< ::ahra::SendMotionRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ahra::SendMotionRequest_<ContainerAllocator> const> ConstPtr;

}; // struct SendMotionRequest_

typedef ::ahra::SendMotionRequest_<std::allocator<void> > SendMotionRequest;

typedef boost::shared_ptr< ::ahra::SendMotionRequest > SendMotionRequestPtr;
typedef boost::shared_ptr< ::ahra::SendMotionRequest const> SendMotionRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ahra::SendMotionRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ahra::SendMotionRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ahra::SendMotionRequest_<ContainerAllocator1> & lhs, const ::ahra::SendMotionRequest_<ContainerAllocator2> & rhs)
{
  return lhs.SM_finish == rhs.SM_finish &&
    lhs.TA_finish == rhs.TA_finish &&
    lhs.UD_finish == rhs.UD_finish &&
    lhs.RL_finish == rhs.RL_finish &&
    lhs.EM_finish == rhs.EM_finish &&
    lhs.ST_finish == rhs.ST_finish &&
    lhs.walkcount == rhs.walkcount &&
    lhs.request_id == rhs.request_id;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ahra::SendMotionRequest_<ContainerAllocator1> & lhs, const ::ahra::SendMotionRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ahra

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ahra::SendMotionRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ahra::SendMotionRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ahra::SendMotionRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ahra::SendMotionRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ahra::SendMotionRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ahra::SendMotionRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ahra::SendMotionRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "4bcb9a6896459a3a3d39e3c375bae71b";
  }

  static const char* value(const ::ahra::SendMotionRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x4bcb9a6896459a3aULL;
  static const uint64_t static_value2 = 0x3d39e3c375bae71bULL;
};

template<class ContainerAllocator>
struct DataType< ::ahra::SendMotionRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ahra/SendMotionRequest";
  }

  static const char* value(const ::ahra::SendMotionRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ahra::SendMotionRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool SM_finish\n"
"bool TA_finish\n"
"bool UD_finish\n"
"bool RL_finish\n"
"bool EM_finish\n"
"bool ST_finish\n"
"int32 walkcount\n"
"int32 request_id # Unique request ID\n"
;
  }

  static const char* value(const ::ahra::SendMotionRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ahra::SendMotionRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.SM_finish);
      stream.next(m.TA_finish);
      stream.next(m.UD_finish);
      stream.next(m.RL_finish);
      stream.next(m.EM_finish);
      stream.next(m.ST_finish);
      stream.next(m.walkcount);
      stream.next(m.request_id);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SendMotionRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ahra::SendMotionRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ahra::SendMotionRequest_<ContainerAllocator>& v)
  {
    s << indent << "SM_finish: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.SM_finish);
    s << indent << "TA_finish: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.TA_finish);
    s << indent << "UD_finish: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.UD_finish);
    s << indent << "RL_finish: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.RL_finish);
    s << indent << "EM_finish: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.EM_finish);
    s << indent << "ST_finish: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.ST_finish);
    s << indent << "walkcount: ";
    Printer<int32_t>::stream(s, indent + "  ", v.walkcount);
    s << indent << "request_id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.request_id);
  }
};

} // namespace message_operations
} // namespace ros

#endif // AHRA_MESSAGE_SENDMOTIONREQUEST_H
